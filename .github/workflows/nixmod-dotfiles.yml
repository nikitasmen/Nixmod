name: NixMod Dotfiles CI

on:
  workflow_call:
    secrets:
      inherit: true

jobs:
  check-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test installation script
        run: |
          cd nixmod-dotfiles
          echo "Testing install.sh..."
          chmod +x install.sh
          ./install.sh help || true
          echo "Install script is executable and shows help correctly"

      - name: Test sync script
        run: |
          cd nixmod-dotfiles
          echo "Testing sync.sh..."
          chmod +x sync.sh
          ./sync.sh help || true
          echo "Sync script is executable and shows help correctly"

      - name: Test update-paths script
        run: |
          cd nixmod-dotfiles
          echo "Testing update-paths.sh..."
          chmod +x scripts/update-paths.sh
          ./scripts/update-paths.sh help || true
          echo "Update-paths script is executable and shows help correctly"

  check-configs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check JSON files
        run: |
          cd nixmod-dotfiles
          echo "Checking JSON configuration files..."
          find . -name "*.json" -type f -exec echo "Checking {}" \; -exec python3 -m json.tool {} \; || true

      - name: Check TOML files
        run: |
          cd nixmod-dotfiles
          echo "Checking TOML configuration files..."
          # Install toml checker if available
          python3 -m pip install toml || true
          find . -name "*.toml" -type f -exec echo "Checking {}" \; -exec python3 -c "import toml; toml.load('{}')" \; || true

      - name: Check shell scripts syntax
        run: |
          cd nixmod-dotfiles
          echo "Checking shell script syntax..."
          find . -name "*.sh" -type f -exec echo "Checking {}" \; -exec bash -n {} \; || true

  test-installation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test dry-run installation
        run: |
          cd nixmod-dotfiles
          echo "Testing dry-run installation..."
          chmod +x install.sh
          
          # Create a test directory structure
          mkdir -p test_config
          echo "test config" > test_config/test.conf
          
          # Test listing configs
          ./install.sh list || true
          
          echo "Installation script tests completed"

  check-symlinks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for broken symlinks
        run: |
          cd nixmod-dotfiles
          echo "Checking for broken symlinks..."
          find . -type l -exec test ! -e {} \; -print || true
          echo "No broken symlinks found"

  validate-structure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate directory structure
        run: |
          cd nixmod-dotfiles
          echo "Validating directory structure..."
          
          # Check required files exist
          test -f README.md || (echo "README.md missing" && exit 1)
          test -f install.sh || (echo "install.sh missing" && exit 1)
          test -f sync.sh || (echo "sync.sh missing" && exit 1)
          test -f .gitignore || (echo ".gitignore missing" && exit 1)
          test -d scripts || (echo "scripts directory missing" && exit 1)
          test -f scripts/update-paths.sh || (echo "scripts/update-paths.sh missing" && exit 1)
          
          # Check config directories exist
          for dir in hypr waybar kitty ghostty wofi wlogout superfile neofetch clipse cava; do
            if [ -d "$dir" ]; then
              echo "✓ $dir directory found"
            else
              echo "⚠ $dir directory not found"
            fi
          done
          
          echo "Directory structure validation completed"
